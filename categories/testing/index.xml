<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on Manabie Tech Blog</title><link>/categories/testing/</link><description>Recent content in Testing on Manabie Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright><lastBuildDate>Thu, 13 Jan 2022 14:28:23 +0700</lastBuildDate><atom:link href="/categories/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Create feature flags using file in Unleash</title><link>/2022/01/manage-list-flags-with-file/</link><pubDate>Thu, 13 Jan 2022 14:28:23 +0700</pubDate><guid>/2022/01/manage-list-flags-with-file/</guid><description>Have you ever struggle having an overview of the feature toggles across your services and applications, especially when you have a lot on the table? We&amp;rsquo;ve been there before! In this blog, let&amp;rsquo;s learn how to create a list of feature toggles in Unleash using file. But first, let&amp;rsquo;s learn some concept of feature toggle and Unleash
What is feature toggle (feature flag)? Feature toggle (Feature flag) is a technique that allows you to disable some functionality of your application, through settings, without having to deploy new code.</description></item><item><title>How to use Playwright in cucumberjs</title><link>/2021/12/how-to-use-playwright-in-cucumberjs/</link><pubDate>Wed, 29 Dec 2021 10:45:33 +0000</pubDate><guid>/2021/12/how-to-use-playwright-in-cucumberjs/</guid><description>In our previous blog article HERE, we explained why we&amp;rsquo;re using Cucumber for E2E test at Manabie, and provided a brief understanding about Cucumber.
This time, let&amp;rsquo;s dive a little bit deeper!
Before we start, let&amp;rsquo;s cover a brief introduction to Cucumber again, and afterward, about Playwright.
Cucumber Cucumber is a tool that supports Behaviour-Driven Development(BDD), If youâ€™re new to Behaviour-Driven Development read BDD introduction first.
Cucumberjs is an open-source software testing tool written in Javascript, while the tests are written in Gherkin, a non-technical and human-readable language.</description></item><item><title>Running Flutter integration tests in Docker</title><link>/2021/12/running-flutter-integration-tests-in-docker/</link><pubDate>Tue, 28 Dec 2021 09:49:36 +0700</pubDate><guid>/2021/12/running-flutter-integration-tests-in-docker/</guid><description>Running Flutter integration tests in Docker Prerequisite Linux OS Installing: Flutter Docker Docker compose KVM https://help.ubuntu.com/community/KVM/Installation Technologies Flutter:
Google&amp;rsquo;s SDK for crafting beautiful, fast user experiences for mobile, web, and desktop from a single codebase. Flutter works with existing code, is used by developers and organizations around the world, and is free and open source. https://github.com/flutter/flutter Docker:
An open platform for developing, shipping, and running applications https://docs.</description></item><item><title>Test Coverage of Go Services during Integration Tests</title><link>/2021/12/integration-test-code-coverage-in-go/</link><pubDate>Mon, 27 Dec 2021 17:10:49 +0700</pubDate><guid>/2021/12/integration-test-code-coverage-in-go/</guid><description>Test Coverage of Go Services during Integration Tests In Golang, getting code coverage with go test is easy. But it&amp;rsquo;s still rather hard for integration tests.
Here I want to introduce the method we used at Manabie to measure the code covered by our integration tests across many microservices.
About our integration tests At Manabie we use Kubernetes for container orchestration. To perform integration tests, we deploy our services, and then run a test container with a go program with a whole lot of integration tests.</description></item><item><title>Why we use Cucumber for end-to-end testing?</title><link>/2021/12/why-we-use-cucumber-for-end-to-end-testing/</link><pubDate>Mon, 13 Dec 2021 14:37:23 +0700</pubDate><guid>/2021/12/why-we-use-cucumber-for-end-to-end-testing/</guid><description>Why we use Cucumber for end-to-end testing? Before getting to know why we use cucumber for End-to-end testing. Let&amp;rsquo;s understand what&amp;rsquo;s end-to-end testing and cucumber are.
What is End to end testing? End to end testing (E2E testing) is a software testing method that validates the entire software. From the beginning to the end.
The purpose of end-to-end testing is to simulate how a real user interacts with the application, list out the scenarios, and test the whole software for dependencies, data integrity and communication with other systems, interfaces, network connectivity and databases to exercise complete production like scenario.</description></item><item><title>Snapshot test your Postgresql in Golang pgx driver</title><link>/2021/10/snapshot-test-your-postgresql-in-golang-pgx-driver/</link><pubDate>Wed, 20 Oct 2021 14:28:23 +0700</pubDate><guid>/2021/10/snapshot-test-your-postgresql-in-golang-pgx-driver/</guid><description>If your unit-test understand SQL syntax, you can cover many behaviors of your code without the need of starting a real DB. Want to understand Postgresql syntax? just simply import Postgresql parser to your program, https://github.com/pganalyze/pg_query_go helps you to do that.
How about using a containerized DB? Sometimes, the repository layer doesn&amp;rsquo;t have much logic (maybe concat some WHERE conditions), only propagate the SQL statement to DB.
Testing with a simple containerized DB is a good option where you can:</description></item></channel></rss>