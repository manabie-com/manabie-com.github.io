<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code-coverage on Manabie Tech Blog</title><link>/tags/code-coverage/</link><description>Recent content in code-coverage on Manabie Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright><lastBuildDate>Mon, 27 Dec 2021 17:10:49 +0700</lastBuildDate><atom:link href="/tags/code-coverage/index.xml" rel="self" type="application/rss+xml"/><item><title>Test Coverage of Go Services during Integration Tests</title><link>/2021/12/integration-test-code-coverage-in-go/</link><pubDate>Mon, 27 Dec 2021 17:10:49 +0700</pubDate><guid>/2021/12/integration-test-code-coverage-in-go/</guid><description>Test Coverage of Go Services during Integration Tests In Golang, getting code coverage with go test is easy. But it&amp;rsquo;s still rather hard for integration tests.
Here I want to introduce the method we used at Manabie to collect and measure code coverage on our servers from integration tests.
About our integration tests At Manabie we use Kubernetes for container orchestration. To perform integration tests, we deploy our services, and then run a test container with a go program with a whole lot of integration tests.</description></item></channel></rss>