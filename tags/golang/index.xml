<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Manabie Tech Blog</title><link>/tags/golang/</link><description>Recent content in Golang on Manabie Tech Blog</description><generator>Hugo</generator><language>en</language><copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright><lastBuildDate>Wed, 24 Aug 2022 10:48:39 +0700</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>J4 stress test framework</title><link>/2022/08/j4-stress-test-framework/</link><pubDate>Tue, 23 Aug 2022 17:10:49 +0700</pubDate><guid>/2022/08/j4-stress-test-framework/</guid><description>Why stress test At Manabie, we have already implemented bunch of features for the business, mostly to support ERP in education domain. The traffic on production is not that high. For each cluster (of each clients), it barely reaches 100 rpc on our Grafana dashboard, and everything looks safe. But no, we realize that in our roadmap, we have a plan to merge all the cluster into a multi-tenant cluster. We don&amp;rsquo;t know if the cluster merge will affect some resources, maybe there are extensively used features that we will not be aware of (features team are rapidly adding more APIs, as the business grows) and we may encouter performance issues unprepared.</description></item><item><title>Set up NATS multi-tenant in golang</title><link>/2022/03/set-up-nats-multi-tenant-in-golang/</link><pubDate>Fri, 18 Mar 2022 10:00:00 +0700</pubDate><guid>/2022/03/set-up-nats-multi-tenant-in-golang/</guid><description>In this blog post, we will learn how to set up NATS Multi-tenancy in golang.
NATS-Jetstream NATS has a built-in distributed persistence system called Jetstream which features new functionalities and higher qualities of service on top of the base Core NATS functionalities and qualities of service.
Jetstream was created to solve the problems identified with streaming technologies today. Some technologies address these better than others, but no current streaming technology is truly multi-tenant, horizontally scalable,&amp;hellip; Today I just talk how we can set up NATS multi-tenancy in golang.</description></item><item><title>Test Coverage of Go Services during Integration Tests</title><link>/2021/12/integration-test-code-coverage-in-go/</link><pubDate>Mon, 27 Dec 2021 17:10:49 +0700</pubDate><guid>/2021/12/integration-test-code-coverage-in-go/</guid><description>Test Coverage of Go Services during Integration Tests In Golang, getting code coverage with go test is easy. But it&amp;rsquo;s still rather hard for integration tests.
Here I want to introduce the method we used at Manabie to measure the code covered by our integration tests across many microservices.
About our integration tests At Manabie we use Kubernetes for container orchestration. To perform integration tests, we deploy our services, and then run a test container with a go program with a whole lot of integration tests.</description></item><item><title>Snapshot test your Postgresql in Golang pgx driver</title><link>/2021/10/snapshot-test-your-postgresql-in-golang-pgx-driver/</link><pubDate>Wed, 20 Oct 2021 14:28:23 +0700</pubDate><guid>/2021/10/snapshot-test-your-postgresql-in-golang-pgx-driver/</guid><description>If your unit-test understand SQL syntax, you can cover many behaviors of your code without the need of starting a real DB. Want to understand Postgresql syntax? just simply import Postgresql parser to your program, https://github.com/pganalyze/pg_query_go helps you to do that.
How about using a containerized DB? Sometimes, the repository layer doesn&amp;rsquo;t have much logic (maybe concat some WHERE conditions), only propagate the SQL statement to DB.
Testing with a simple containerized DB is a good option where you can:</description></item></channel></rss>